{
  "hash": "3d4f3dc73102099d1ff485f8cb995299",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: 'Using generative AI as an academic - June 2024 edition'\nauthor: \"Jason Collins\"\ndate: 2024-07-15 09:00:00+10:00\ndraft: true\naliases:\n  - /using-large-language-models-as-an-academic-june-2024-edition\nbibliography: references.bib\n---\n\n\nI first wrote [a version of this post in April 2023](ADD_LINK). A lot has changed since then, in both the tools and how I use them.\n\n## My toolkit\n\nI use multiple tools, switching between them for tasks and getting multiple responses. I want to gain a sense of the frontier.\n\nAs an academic, I gain free access to [Github Copilot](https://github.com/features/copilot). (It's \\$10 a month otherwise. Students can also get free access.) CoPilot provides code suggestions in coding environments. But while badged this way, CoPilot also provides text suggestions more broadly. To access CoPilot, I write markdown documents in [Visual Studio Code](https://code.visualstudio.com) or [RStudio](https://posit.co/download/rstudio-desktop/). (For those who want more specific guidance on how to set this up, I've added that at the bottom of this post.)\n\nIf you use CoPilot in Visual Studio Code you also gain access to Copilot Chat. CoPilot Chat allows you to ask questions about snippets of code and errors. It's fantastic and much faster than the old Google search for solutions. If asking about errors, it will often propose solutions. As a result, if I'm writing code afresh, I tend to use Visual Studio Code. I'm in RStudio more often when I'm writing posts such as this.\n\nI also work with [ChatGPT Plus](https://chat.openai.com/) and [Claude Pro](https://www.anthropic.com/claude) open in a browser. I subscribe to the Pro/Plus version of both: it is worth it for the superior tools. As you'll see from the below, I use them all the time.\n\nI run some other large language models locally on my computer using [Ollama](https://ollama.com/). I do this more to get a feel for them than for the current utility. Most of my recent experimentation has been with [Llama 3](https://ollama.com/library/llama3). I use these models either via the command line or using the \\[CoPilot chat plugin\\](ADD_LINK) in [Obsidian](ADD_LINK).\n\nI also subscribe to [Eleven](ADD_LINK) for it's AI voice capabilities. More on that below.\n\nAcross these tools, I'm paying around \\\\\\$60USD a month.\n\nI've experimented with other tools, but they haven't yet formed a large part of my workflow. I don't use Bing much, except occassionally for images if ChatGPT isn't giving me what I want. I like that it gives me four images for every prompt. I experimented with Google Gemini, but haven't found reason for it to supplant the Claude plus ChatGPT combination. I revisit it every month or two to whether I should add it to the mix.\n\n## Thinking (efficiency gain: uncertain)\n\nI am increasingly using Claude and ChatGPT as an interactive [rubber duck](https://en.wikipedia.org/wiki/Rubber_duck_debugging). When thinking through something new, I'll often state my thoughts and ask for comment. I'll often ask them to explain a concept to me, then I will ask follow up questions. Sometimes I'll do this in chat mode \\[WHAT IS IT CALLED\\] when I am walking. I know that I'm not getting 100% accurate information, but I wouldn't talking with a friend either.\n\nSimilarly, after reading an article and forming my own views on its message, strengths and weaknesses, I'll ask Claude or ChatGPT their views. I find this can be hit and miss, but on net worth doing. Sometimes the description is spot on and the critiques hit points I haven't thought of.\n\nWhen I'm having trouble getting a sentence or paragraph right, I'll often hand it over and ask for 10 possible rewrites. I'll almost never take a rewrite as provided, but it often gives me a word or turn of phrases that does the job.\n\nFinally, if I have a technical question, I'll ask before googling. It's faster.\n\n## Coding (efficiency gain: 10x)\n\nDespite spending a lot of time in R, I am a crap coder. The simplest errors had me crawling Stack Overflow for hours. I struggle to build a structure when looking at a blank screen.\n\nMy typical approach now is to write a comment and let CoPilot do the first cut of the code. I will then tweak the code until it is in shape. That tweaking isn't manual tweaking either. If there is an error or problem that I can't resolve, I'll use CoPilot Chat to get a solution.\n\nCoPilot is also great in helping me understand someone else's code. I'll highlight sections and ask for the chat to explain what it does. Often, I'll paste poorly documented code into Claude or ChatGPT and ask it to write comments. Further, If the code looks overly complicated, a request to simplify often yields good results. (I've been asking ChatGPT to review some of my old code recently. I'm a bit embarrassed at how much more efficiently I could have written it.)\n\nOne large benefit has come from cross-language translation. Last year I wanted to reproduce the results in in Berkeley Dietvorst's [Algorithm aversion: People erroneously avoid algorithms after seeing them err](https://doi.org/10.1037/xge0000033). Data and the code for analysis was [available on ResearchBox](ADD%20LINK). The problem was that the code was in Stata, I have no desire to learn Stata. So, I pasted the code into ChatGPT and asked for a conversion to R. What I received was 90% of the way there. Initially, there was an error, but pasting the error into ChatGPT gave me the solution first shot. I then tweaked a couple of the variable manipulations and specified that some of the t-tests were paired t-tests. That was it. In less than 10 minutes I had code that was reproducing exactly the results from Study 1. I've now done this translation dozens of times when examining and reproducing studies by others.\n\nI'm increasingly asking ChatGPT and Claude to provide me fully working programs. For example, I am building a website with underlying database and predictive model for predicting AFL games. (I wanted to experiment with how far I could go with these tools.) I obtained a web interface and underlying code to access the database from Claude. I used ChatGPT for the first version of the predictive model. I'll post a link here when it is working as desired.\n\n## AI-voiced lectures (efficiency gain: 10%; quality gain: 20%)\n\nLast year I decided to base my undergraduate behavioural economics subject around [short pre-recorded videos](https://www.youtube.com/@jasonacollins), interactive online seminars and tutorials. To produce the videos I wrote scripts, which also form the [subject notes](https://behaviouraleconomics.jasoncollins.blog). I read the notes accompanied by slides.\n\nThere are three pain points in this exercise. First, I speak too fast (even when I think I'm speaking slow) and I enunciate many words poorly. Second, recording takes a lot of time. I rarely get a two to five-minute video in a single take that I'm happy with. Third, if I want to tweak the recording, I need to either re-record solid chunks of text or fiddle around with video edits.\n\nSo, why not get an artificial voice to do the speaking? When I wrote my last post, AI-voiced lectures were the future. It's now a core part of my subject delivery.\n\nI experimented with [Murf.ai](https://murf.ai), [Speechify](https://speechify.com), [play.ht](https://play.ht/) and [Eleven](https://beta.elevenlabs.io). Initially I used Murf.ai to make some videos, as it allowed me to pair slides and text easily. I could also integrate with Google Slides. However, the voices sound a bit robotic, so I currently use Eleven, even though all I get is an audio file. Eleven has fantastic voices. Even a hint of AI-voicing gets a negative reaction from students, so voice quality needs to be my primary criterion. If the Murf.ai voices improve and Eleven doesn't develop video integration, I may shift back.\n\nThe production process is easy. I paste the text into an Eleven project chapter and render the voice. Typically, the pacing won't be quite right, so I'll add some commas and dashes to create some pauses. I then export the voice file and combine it with images in Final Cut Pro. I can normally create a five to 10 minute video from text and slides in less than a hour.\n\nThe fantastic part is that if I want to update a section, or change a sentence, I update the script in Eleven, re-render the relevant sentences, load a new voice file into the Final Cut Pro project and tweak the slide timings (if the voice edits require it). It's fast, simple and gives me a consistently high-quality video.\n\nEleven has the ability to \"clone\" your voice. I tried a quick clone on play.ht, but it gave me an American accent. On Eleven, you can get a professional clone of a voice by uploading three or more hours of audio. I did that, and it sounds just like me, even with the Australian accent. Unfortunately, it comes with my faults, particularly speaking too fast. Eleven doesn't have an option to slow down the speaking outside of putting a mountain of dashes through the text. So, for now, I'm using one of their off-the-shelf Australian voices.\n\nHere are two samples, an off-the-shelf voice and a section with me speaking.\n\nI've also started looking at options to create an AI avatar based on videos or photos of me for some parts of the videos. I'm leaving that one for the moment but can see myself revisiting in the next year.\n\n## Writing lecture notes (efficiency gain: 10 to 30%)\n\nI don't find CoPilot useful if I'm writing something original such as a blog post. I used to receive suggestions as I type, but more often now I turn CoPilot off if when writing. The distraction in filtering suggestions is too costly and I am worried about getting dragged in random directions.\n\nBut for lecture notes, which are more mechanical, there are some clear gains. The notes for my undergraduate behavioural economics subject (which you can access [here](https://behaviouraleconomics.jasoncollins.blog)) were produced with CoPilot assistance.\n\nHere are a few instances where CoPilot has been useful.\n\nOften the notes include a statement of a concept followed by a step-by-step example or illustration. The gain comes when you're writing those steps.\n\nFor example, in a section about decision making under risk, I might write:\n\n> Bill is a risk-averse agent with utility function $u(x)=\\text{ln}(x)$ and wealth of \\$100. He is offered a 50:50 bet to win \\$100, lose \\$50.\n>\n> Will Bill accept the bet?\n\nCoPilot will sometimes write something like:\n\n> Can someone please help me answer the following question: \"Will Bill accept the bet?\"\n\nThere must be a lot of study cheat sites forming part of the training data.\n\nBut if CoPilot does that, simply write the first couple of words of the answer \"First, we calculate...\" and then CoPilot is away.\n\n> First, we calculate the expected utility of each option. The expected utility of the bet is:\n\n```` markdown\n```{=tex}\n\\begin{aligned}\nEU(\\text{bet}) &= 0.5 \\times u(100) + 0.5 \\times u(-50) \\\\\n&= 0.5 \\times \\text{ln}(100) + 0.5 \\times \\text{ln}(50) \\\\\n&= 4.259\n\\end{aligned}\n```\n````\n\n> The expected utility of not taking the bet is:\n\n```` markdown\n\n```{=tex}\n\\begin{aligned}\nEU(\\text{no bet}) &= U(100) \\\\\n&= \\text{ln}(100) \\\\\n&= 4.605\n\\end{aligned}\n```\n````\n\n> As the expected utility of the bet is less than the expected utility of not taking the bet, Bill will not accept the bet.\n\nNot bad for a few seconds of work. For those unfamiliar with the mathematical notation, this is $\\LaTeX$, which renders into nice equations like this.\n\n\n```{=tex}\n\\begin{aligned}\nEU(\\text{bet}) &= 0.5 \\times u(100) + 0.5 \\times u(-50) \\\\\n&= 0.5 \\times \\text{ln}(100) + 0.5 \\times \\text{ln}(50) \\\\\n&= 4.259\n\\end{aligned}\n```\n\nI might beef this up with a better explanation, or paste the question into ChatGPT direct, where I tend to get more detailed answers. CoPilot has done OK with the math here - the logs are correct!\n\nCoPilot is also great when I'm doing repetitive tasks such as describing the elements of an equation or diagram. Start describing the first element and it might give you the rest. And if you write a point followed by \"Conversely, ...\", CoPilot is often on the money.\n\nI also use CoPilot with [ggplot](https://ggplot2.tidyverse.org) to produce graphs for the notes. When I wanted to generate a chart showing a [probability weighting function](https://behaviouraleconomics.jasoncollins.blog/prospect-theory/probability-weighting) from prospect theory, I created an R code block and typed a comment:\n\n> #Plot of probability weighting function using ggplot2\n\nHere's the result that ChatGPT produced with the diagram rendered below:\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\n#Plot of probability weighting function using ggplot2\nlibrary(ggplot2)\n\n#Define probability weighting function\nprob_weight <- function(p, alpha){\n  exp(-(-log(p))^alpha)\n}\n\n#Create data frame of probabilities and weights\nprob <- seq(0, 1, 0.001)\nprob_df <- data.frame(prob = prob, weight = prob_weight(prob, 0.6))\n\n#Plot\nggplot(prob_df, aes(x = prob, y = weight)) +\n  geom_line() +\n\n  #Add labels\n  labs(x = \"Probability\", y = \"Weight\")\n```\n\n::: {.cell-output-display}\n![](using-generative-AI-as-academic-june-2024-edition_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n:::\n\n\nExactly what I wanted. When I implemented this in the notes, all I did was tweak the style and add a 45-degree line.\n\nCoPilot's offering uses Prelec's [-@prelec1998] probability weighting function. Whether it picked that up from earlier text in my notes or just gave the most common function for probability weighting, I don't know, but it's what I would have used if doing it manually.\n\nCoPilot didn't offer this full chunk of code at once. Each comment was offered, then the piece of code after it, one after the other. But the only work I did was writing the first comment and pressing tab several times as each succeeding comment or chunk of code was suggested. (CoPilot has certainly increased the level of comments in my code too.)\n\nOne thing I have noted is that CoPilot uses all of the text in the document in giving its suggestions. In writing this post I wasn't able to replicate what I did when writing the lecture notes. I got better results in the lecture notes themselves. A few paragraphs about probability weighting before I ask for the code generates much better results than asking for the chart straight up.\n\n## Generating quiz questions (efficiency gain: 3x)\n\nOne of the best ways to learn is to be tested. As a result, I offer students in my undergraduate subject a series of practice quizzes that they can work through. In the first class I tell the students about the effectiveness of spaced repetition as a learning technique. They can then use the practice quiz questions on an intermittent basis to test whether they have learnt core concepts. (When I find the bandwidth, I plan to implement those quiz questions in [Orbit](https://withorbit.com) or something similar, and place them through the [online notes](https://behaviouraleconomics.jasoncollins.blog).)\n\nSome questions are easy to generate: definitions and the like. But it's hard work to generate questions in bulk and I struggle to generate plausible-sounding but incorrect answers to multiple-choice questions.\n\nI now ask ChatGPT to generate them. In the prompts, I vary in the specificity of the questions. \"Give me 20 multiple choice questions testing the concept of loss aversion.\" \"Give me 20 multiple choice questions testing prospect theory.\" And so on. Out of each batch of 20, only a few will be suitable. There might be no correct answer or two correct answers, or ChatGPT might confuse concepts. But by tweaking my instruction by, say, describing the level of the students (undergraduate) or more explicitly defining the concept, it doesn't take long to get 10 or so good questions.\n\nI haven't used ChatGPT to generate assessable quiz questions yet, but I'm planning to use it for the upcoming final exam. That exam is a closed-book AI-invigilated exam, so is less vulnerable to someone simply feeding the questions back to ChatGPT. One idea I'm tempted to try is to feed it some previous year's exams and ask for new exams on the same concepts.\n\n## Writing organisational fluff (efficiency gain: 2x)\n\nWork in any decent-sized modern organisation and you will have to write some level of fluff to satisfy the higher-ups, clients, government requirements and the like.\n\nI am hopeless at those tasks. I have to invest heavily to make fluff sound decent.\n\nMy approach to these exercises depends on the degree of pointlessness.\n\nIf the task relates to a process that will have zero impact on what anyone will do, I simply give the task to ChatGPT, let it do the first cut and then tweak as required. One or two sentences of guidance often gets you 80% of the way there.\n\nIf I think there is a positive benefit to the task, or it's for public consumption, I'll be more proactive first up. I will write a rough draft first, not caring much about the writing but making sure the concepts I want to include are there. It might be in dot points. Then I'll ask ChatGPT for a version that is \"clearer\", \"simpler\" or \"better written\" or \"for a ten-year-old\". I often find this process works best in two stages. The \"clearer\" version often uses the same words as me, but structures them better. Then I ask ChatGPT to write it again, but instructing it to \"forget about the original text.\" I've been pleasantly surprised at how good some of those second versions are.\n\n## Slide filler (efficiency gain: 2x)\n\nI'm not a big fan of pointless eye candy in slide decks. But if you're doing pre-recorded material (see below) and you don't want your mug on the screen, you sometimes need some filler. In that case, I head straight to [DALL-E](https://labs.openai.com). I've adopted a theme for my lecture slides - black and white line drawings - so I ask for a black and white line drawing of something related to what I am talking about.\n\nThis is much quicker than hunting for images with open usage rights.\n\nCompared to ChatGPT, DALL-E seems pretty lame. It still struggles with concepts such as \"on\" or \"ten\" or \"without writing\". Sometimes I'll give up on a more complex concept (a deck of cards on a table) and go for something simpler (a deck of cards). I'm looking forward to GPT-4 sitting behind an image generator.\n\nI've also tried [Stable Diffusion](https://stablediffusionweb.com/) but found it was much harder work to get something I can use.\n\n## What's next?\n\n### CoPilot integration with Microsoft tools\n\nAt the moment I have multiple streams of access to these tools. I'm looking forward to getting CoPilot in the core Microsoft tools: the university is trialling this at the moment. If I don't have to exit PowerPoint to get my images, that's an extra efficiency.\n\n### Please Apple ...\n\nI'm largely in the Mac ecosystem, but Apple seems absolutely crap in the world of assistants/chat. (\"Hey Siri, tell me this most basic fact about the world.\" \"I've sent some irrelevant web results to your iPhone.....\") If at some point these tools become tied to Microsoft hardware or Windows, I'm moving.\n\n(I exited the Google ecosystem when I had trouble sharing a file from Google Drive because it breached the terms of service. It was a document that included the words \"vaccination\" and \"scepticism\", although if you see the [resulting post](https://www.jasoncollins.blog/posts/megastudy-scepticism), you can see the Google algorithm was pretty crude. At that point I opted for what I hope is a bit more privacy and jettisoned Google...)\n\n## Getting going with Github Copilot\n\nThe below gives the basic steps to access GitHub CoPilot.\n\nIf you are an academic, you can sign up for (free) academic access to CoPilot at [this link](https://education.github.com/discount_requests/application). If you're not an academic or student, sign up for \\$10 a month as described [here](https://docs.github.com/en/billing/managing-billing-for-github-copilot/managing-your-github-copilot-subscription-for-your-personal-account). You'll need a Github account to do this. The \\$10 a month is worth it.\n\nVisual Studio Code is available [here](https://code.visualstudio.com). (I use the Mac version.) Download and install.\n\nInstall the Github CoPilot extension into Visual Studio Code. Instructions on installing the extension are [here](https://docs.github.com/en/copilot/quickstart#installing-the-github-copilot-extension-for-visual-studio-code). On installation you'll be prompted to login to GitHub to gain access to authorise CoPilot.\n\nOnce you have done that, using CoPilot is easy. You simply type. As you type, you will be given suggestions.\n\nThe setup in RStudio is even easier. Download RStudio from here. Under Tools/Global Options is a CoPilot menu item. Enable CoPilot there. You will be asked to enter your GitHub login details to get it running.\n\nI write in markdown (and at the moment, a flavour of markdown called [Quarto](https://quarto.org)). It allows me to include $\\LaTeX$ math and R computations within any document (as I have in this post). If you're an academic stuck in the $\\LaTeX$ ecosystem, you can also write in Visual Studio Code wholly in $\\LaTeX$. (Although I say jettison that dinosaur and use $\\LaTeX$ math in a markdown document - that ability to add computations is worth it, and the readability and experience so much easier.) You can also just get CoPilot in Word. I'm looking forward to my university moving beyond the experimental stage and giving us access. (I took a one-month free trial of Microsoft CoPilot on the home computer, but didn't find the time to give it a proper go.)\n",
    "supporting": [
      "using-generative-AI-as-academic-june-2024-edition_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}